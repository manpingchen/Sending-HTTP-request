{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","row","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandlers","useCallback","a","fetch","response","json","data","loadedMovies","push","message","method","body","JSON","stringify","headers","name","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,wMCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,wBC0BdM,EApCE,SAACZ,GAChB,IAAMa,EAAWC,mBACXC,EAAiBD,mBACjBE,EAAiBF,mBAcvB,OACE,0BAAMG,SAbkB,SAACC,GACzBA,EAAMC,iBAEN,IAAMhB,EAAQ,CACZC,MAAOS,EAASO,QAAQC,MACxBhB,YAAaW,EAAeI,QAAQC,MACpCf,YAAaS,EAAeK,QAAQC,OAGtCrB,EAAMsB,WAAWnB,KAKf,yBAAKF,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,KAErC,yBAAKZ,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,IAAI,IAAIhB,GAAG,eAAee,IAAKX,KAE3C,yBAAKd,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,2BAAOC,KAAK,OAAOd,GAAG,eAAee,IAAKV,KAE5C,+CC2DSY,MAvFf,WACE,MAA4BC,mBAAS,IAArC,mBAAOrB,EAAP,KAAesB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAsBC,sBAAW,sBAAC,kCAAAC,EAAA,6DACtCL,GAAa,GACbE,EAAS,MAF6B,kBAIbI,MACrB,qEALkC,cAI9BC,EAJ8B,gBAcjBA,EAASC,OAdQ,OAkBpC,IAAW9B,KAJL+B,EAd8B,OAgBhCC,EAAe,GAEDD,EAChBC,EAAaC,KAAK,CAChBhC,GAAID,EACJN,MAAOqC,EAAK/B,GAAKN,MACjBC,YAAaoC,EAAK/B,GAAKL,YACvBC,YAAamC,EAAK/B,GAAKJ,cAI3BwB,EAAUY,GA3B0B,kDA6BpCR,EAAS,KAAMU,SA7BqB,QA+BtCZ,GAAa,GA/ByB,0DAgCrC,IArCU,4CA2Cb,WAA+B7B,GAA/B,eAAAkC,EAAA,sEACyBC,MACrB,oEACA,CACEO,OAAQ,OACRC,KAAMC,KAAKC,UAAU7C,GACrB8C,QAAS,CAAE,eAAgB,sBANjC,cACQV,EADR,gBAUqBA,EAASC,OAV9B,cAYWU,MACPf,IAbJ,4CA3Ca,sBAuCbgB,qBAAU,WACRhB,MACC,CAACA,IAmBJ,IAAIiB,EAAU,8CAcd,OAZI5C,EAAO6C,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY9C,OAAQA,KAG5BuB,IACFqB,EAAU,0CAGRnB,IACFmB,EAAU,2BAAInB,IAId,kBAAC,IAAMsB,SAAP,KACE,iCACE,kBAAC,EAAD,CAAUjC,WA7EH,+CA+ET,iCACE,4BAAQkC,QAASrB,GAAjB,iBAEF,iCAAUiB,KClFhBK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d296df27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2ENNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from \"react\";\nimport classes from \"./AddMovie.module.css\";\n\nconst AddMovie = (props) => {\n  const titleRef = useRef();\n  const openingTextRef = useRef();\n  const releaseDateRef = useRef();\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const movie = {\n      title: titleRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n      openingText: openingTextRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  };\n\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div className={classes.control}>\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" id=\"title\" ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor=\"opening-text\">Opening Text</label>\n        <textarea row=\"5\" id=\"opening-text\" ref={openingTextRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor=\"release-date\">Release Date</label>\n        <input type=\"text\" id=\"release-date\" ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n};\n\nexport default AddMovie;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandlers = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-movie-890b6-default-rtdb.firebaseio.com/movies.json\"\n      );\n\n      // bc the SWAPI doesnt reponse the error response\n      // hence we check the response \"ok\" field and throw an error to catch\n      // if (!response.ok) {\n      //   throw new Error(\"Something went wrong!\");\n      // }\n\n      const data = await response.json();\n\n      let loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          releaseDate: data[key].releaseDate,\n          openingText: data[key].openingText,\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandlers();\n  }, [fetchMoviesHandlers]);\n\n  async function AddMovieHandler(movie) {\n    const response = await fetch(\n      \"https://react-movie-890b6-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: { \"Content-Type\": \"application/json\" },\n      }\n    );\n\n    const data = await response.json();\n\n    if (data.name) {\n      fetchMoviesHandlers();\n    }\n  }\n\n  let content = <p>No Movie Found.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={AddMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandlers}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}